// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SpecType {
  MIN
  REC
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String     @unique
  name      String?
  password  String
  image     String?
  provider  String     @default("credentials")
  role      Role       @default(USER)
  cart      Cart?
  reviews   Review[]
  Order     Order[]
  wishlist  Wishlist[]
  createdAt DateTime   @default(now())
}

model Platform {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String    @unique
  products Product[]
}

model Category {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String    @unique
  products Product[]
}

model Wishlist {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  slug        String     @unique
  discount    Int        @default(0)
  description String
  price       Int
  rating      Float?     @default(0.0)
  numReviews  Int        @default(0)
  specs       Spec[]
  images      Image[]
  reviews     Review[]
  wishlist    Wishlist[]
  platformId  String     @db.Uuid
  platform    Platform   @relation(fields: [platformId], references: [id], onDelete: Cascade)
  categoryId  String     @db.Uuid
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Spec {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  type      SpecType
  cpu       String
  gpu       String
  ram       String
  storage   String
  directX   String
  os        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  bannerId  String?  @db.Uuid
  banner    Banner?  @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @unique
  images    Image[]
  price     Int
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String
  rating    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code       String   @unique
  discount   Int
  startDate  DateTime
  endDate    DateTime
  usageCount Int
  usageLimit Int
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String     @db.Uuid
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId])
}

model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String   @db.Uuid
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String      @db.Uuid
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  orderName String?
  couponId  String?     @db.Uuid
  coupon    Coupon?     @relation(fields: [couponId], references: [id], onDelete: Cascade)
  total     Int
  status    OrderStatus @default(PENDING)
  payments  Payment[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
  @@index([couponId])
}

model OrderItem {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId         String   @db.Uuid
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       Int
  productName     String
  productCategory String
  productPlatform String
  productImage    String
  productKey      String
  quantity        Int
  price           Int
  discount        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId        String        @unique @db.Uuid
  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paymentKey     String?
  amount         Int
  type           PaymentType?
  orderName      String?
  mId            String?
  method         String?
  status         PaymentStatus
  requestedAt    String?
  approvedAt     String?
  cardNumber     String?
  cardType       String?
  receiptUrl     String?
  checkoutUrl    String?
  failureCode    String?
  failureMessage String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt

  @@index([orderId])
}

enum PaymentType {
  NORMAL
  BILLING
  BRANDPAY
}

enum PaymentStatus {
  READY
  IN_PROGRESS
  WAITING_FOR_DEPOSIT
  DONE
  CANCELED
  PARTIAL_CANCELED
  ABORTED
  EXPIRED
}

enum OrderStatus {
  PENDING
  FAILED
  SUCCESS
}
